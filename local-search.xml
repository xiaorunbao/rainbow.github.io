<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows上git换行符LF-CRLF问题</title>
    <link href="/20220317/Windows%E4%B8%8Agit%E6%8D%A2%E8%A1%8C%E7%AC%A6LF-CRLF%E9%97%AE%E9%A2%98/"/>
    <url>/20220317/Windows%E4%B8%8Agit%E6%8D%A2%E8%A1%8C%E7%AC%A6LF-CRLF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近重装了系统，因为 PO 用的 mac，所以在 Windows 上下载完代码插件就会大量报错。<br><img src="err_104923.png" alt="错误"></p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>在不同的操作系统中，换行符并不统一，Linux 系统中使用 0x0D0A(CRLF),而 MAC OS 系统起初使用 0x0D(CR) 后来和 Linux 系统保持一致。 而 git 默认采用 Linux 的换行符。</p><p>git 为了解决不同平台换行符不一致的问题，在 windows 操作系统中默认在检出代码时将 LF 转换为 CRLF,而在提交的时候再转换为 LF，但是看似完美的解决方案在中文环境中却失效了。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="方案一：编译器设置"><a href="#方案一：编译器设置" class="headerlink" title="方案一：编译器设置"></a>方案一：编译器设置</h2><p><img src="494869038.png" alt="编译器设置"></p><h2 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h2><h3 id="git-的相关参数：eol-autocrlf-safecrlf"><a href="#git-的相关参数：eol-autocrlf-safecrlf" class="headerlink" title="git 的相关参数：eol autocrlf safecrlf"></a>git 的相关参数：eol autocrlf safecrlf</h3><ul><li>eol: 设置工作目录中文件的换行符，有三个值 lf, crlf 和 native（默认，同操作系统）</li><li>autocrlf:<ul><li>true 表示检出是转换 CRLF, 提交时转换为 LF</li><li>input 表示检出是不转换，提交时转换为 LF</li><li>false 表示不做转换</li></ul></li><li>safecrlf:<ul><li>true 表示不允许提交时包含不同换行符</li><li>warn 则只在有不同换行符时警告</li><li>false 则允许提价时有不同换行符存在</li></ul></li></ul><h4 id="AutoCRLF"><a href="#AutoCRLF" class="headerlink" title="AutoCRLF"></a>AutoCRLF</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#提交时转换为LF，检出时转换为CRLF</span><br>git config --global core.autocrlf <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#提交时转换为LF，检出时不转换</span><br>git config --global core.autocrlf input<br><br><span class="hljs-comment">#提交检出均不转换</span><br>git config --global core.autocrlf <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="SafeCRLF"><a href="#SafeCRLF" class="headerlink" title="SafeCRLF"></a>SafeCRLF</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#拒绝提交包含混合换行符的文件</span><br>git config --global core.safecrlf <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#允许提交包含混合换行符的文件</span><br>git config --global core.safecrlf <span class="hljs-literal">false</span><br><br><span class="hljs-comment">#提交包含混合换行符的文件时给出警告</span><br>git config --global core.safecrlf warn<br></code></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>对于 Windows 系统，可以将 Git 客户端配置为将行结束符转换为 CRLF 格式，同时退出，并在提交操作时将其转换回 LF 格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.autocrlf <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>对于 GNU/Linux 或 Mac OS，我们可以配置 Git 客户端，以便在执行提交时从 CRLF 转换为 LF。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.autocrlf input<br></code></pre></td></tr></table></figure><h2 id="问题解决-愉快的码代码吧！"><a href="#问题解决-愉快的码代码吧！" class="headerlink" title="问题解决 愉快的码代码吧！"></a>问题解决 愉快的码代码吧！</h2><p><img src="111459.png" alt="问题解决"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>著名定律</title>
    <link href="/20210326/%E8%91%97%E5%90%8D%E5%AE%9A%E5%BE%8B/"/>
    <url>/20210326/%E8%91%97%E5%90%8D%E5%AE%9A%E5%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="破窗定律"><a href="#破窗定律" class="headerlink" title="破窗定律"></a>破窗定律</h1><p>破窗效应（英语：Broken windows theory）是犯罪学的一个理论，该理论由詹姆士·威尔逊（James Q. Wilson）及乔治·凯林（George L. Kelling）提出，并刊于《The Atlantic Monthly》1982 年 3 月版的一篇题为《Broken Windows》的文章。<br>此理论认为环境中的不良现象如果被放任存在，会诱使人们仿效，甚至变本加厉。以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。一面墙，如果出现一些涂鸦没有被清洗掉，很快的，墙上就布满了乱七八糟、不堪入目的东西；一条人行道有些许纸屑，不久后就会有更多垃圾，最终人们会视若理所当然地将垃圾顺手丢弃在地上。这个现象，就是犯罪心理学中的破窗效应。</p><h1 id="墨菲定律"><a href="#墨菲定律" class="headerlink" title="墨菲定律"></a>墨菲定律</h1><p>墨菲定律是一种心理学效应，1949 年由美国的一名工程师爱德华·墨菲（Edward A. Murphy）提出的，亦称墨菲法则、墨菲定理等。<br>原文为：如果有两种或两种以上的方式去做某件事情，而其中一种选择方式将导致灾难，则必定有人会做出这种选择。根本内容是：如果事情有变坏的可能，不管这种可能性有多小，它总会发生。</p><h1 id="古德哈特定律"><a href="#古德哈特定律" class="headerlink" title="古德哈特定律"></a>古德哈特定律</h1><p>当一个政策变成目标，它将不再是一个好的政策。</p><p>典型例子：统计代码行数和测试覆盖率。代码行数很多，测试覆盖率也很高，但是 BUG 变的更多。</p><h1 id="霍夫斯塔特定律"><a href="#霍夫斯塔特定律" class="headerlink" title="霍夫斯塔特定律"></a>霍夫斯塔特定律</h1><p>霍夫斯塔特定律是由道格拉· 霍夫斯塔特(Douglas Hofstadter) 提出，并且以他的名字来命名的。</p><p>事情总是要花费比你预想更长的时间，即使你把霍夫斯塔特定律也考虑在内。</p><h1 id="布鲁斯克定律"><a href="#布鲁斯克定律" class="headerlink" title="布鲁斯克定律"></a>布鲁斯克定律</h1><p>布鲁克斯法则是指投入更多的人来开发一个紧急的项目只会让进度更慢。更多并不意味着更好，有些事最好是一个人来干。<br>布鲁克斯法则是由被认为是“IBM 360 系统之父”的 Frederick P. Brooks，Jr 提出的，他认为：向进度落后的项目中增加人手，只会使项目更加落后。例如“三个和尚没水吃，厨师太多做坏汤。”</p><h1 id="康威定律"><a href="#康威定律" class="headerlink" title="康威定律"></a>康威定律</h1><p>设计系统的架构受制于产生这些设计的组织的沟通结构。</p><p>通俗的来讲：产品必然是其（人员）组织沟通结构的缩影。</p><p>康威定律可谓软件架构设计中的第一定律，起初只是在杂志上的发表，后经过《人月神话》这本软件界圣经的引用，并命名为康威定律（Conway’s law），因此得以推广。</p><p>只通过简单的描述可能无法理解康威定律的精髓所在，原文中康威定律可总结为四个定律：</p><blockquote><p>第一定律 组织沟通方式会通过系统设计表达出来。</p><p>第二定律 时间再多一件事情也不可能做的完美，但总有时间做完一件事情。</p><p>第三定律 线型系统和线型组织架构间有潜在的异质同态特性。</p><p>第四定律 大的系统组织总是比小系统更倾向于分解。</p></blockquote><h1 id="伯斯塔尔法则"><a href="#伯斯塔尔法则" class="headerlink" title="伯斯塔尔法则"></a>伯斯塔尔法则</h1><p>伯斯塔尔法则有点像人类社会中的一个社交原则，“对自己严格，对他人宽容”，能够做到这个原则的人，相信人人都愿意和他交朋友，而能够做到伯斯塔尔法则的软件程序也是人人都喜欢用的。</p><p>发送时保守：这一点主要是用来告诫开发人员的。作为一名开发人员，你一定要遵循代码世界里的规范。你的代码必须要写的标准，生成的一定要谨慎，尽量不要引起各种错误，这样才能使得浏览器很好的进行解析。</p><p>接受时开放：这一点是为了不让你的用户产生不好的体验。如果一个开发人员，代码写得就是天马行空，就是不遵循 HTML 标准，而作为浏览器你要足够的开放，可以接受任何时代，不同时期的 HTML 文档，然后将其渲染到浏览器上给用户看。浏览器要具有一定的容错能力，一两个错误不应该成为浏览器放弃解析的原因。</p><h1 id="二八法则"><a href="#二八法则" class="headerlink" title="二八法则"></a>二八法则</h1><p>巴莱多定律（也叫二八定律）是 19 世纪末 20 世纪初意大利经济学家巴莱多发现的。他认为，在任何一组东西中，最重要的只占其中一小部分，约 20%，其余 80%尽管是多数，却是次要的，因此又称二八定律。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker安装mongo</title>
    <link href="/20210319/docker%E5%AE%89%E8%A3%85mongo/"/>
    <url>/20210319/docker%E5%AE%89%E8%A3%85mongo/</url>
    
    <content type="html"><![CDATA[<h2 id="docker-拉取镜像和容器启动"><a href="#docker-拉取镜像和容器启动" class="headerlink" title="docker 拉取镜像和容器启动"></a>docker 拉取镜像和容器启动</h2><h3 id="获取-mongo-镜像"><a href="#获取-mongo-镜像" class="headerlink" title="获取 mongo 镜像"></a>获取 mongo 镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mongo<br></code></pre></td></tr></table></figure><h3 id="创建-volume-映射"><a href="#创建-volume-映射" class="headerlink" title="创建 volume 映射"></a>创建 volume 映射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker volume create mongodb<br>docker volume create mongodb_config<br><br>docker network create mongodb<br></code></pre></td></tr></table></figure><h3 id="创建-network-映射"><a href="#创建-network-映射" class="headerlink" title="创建 network 映射"></a>创建 network 映射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create mongodb<br></code></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -d -v mongodb:/data/db \<br> -v mongodb_config:/data/configdb -p 27017:27017 \<br> --network mongodb \<br> --name mongodb \<br> mongo<br></code></pre></td></tr></table></figure><h2 id="设置-mongo-登录用户密码"><a href="#设置-mongo-登录用户密码" class="headerlink" title="设置 mongo 登录用户密码"></a>设置 mongo 登录用户密码</h2><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mongodb bash<br></code></pre></td></tr></table></figure><h3 id="使用-admin-库（database）"><a href="#使用-admin-库（database）" class="headerlink" title="使用 admin 库（database）"></a>使用 admin 库（database）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">use admin<br></code></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><blockquote><p>user: 用户名</p><p>pwd: 密码</p><p>role 角色配置，此处直接使用 admin 管理员权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.createUser(&#123;user: <span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-built_in">pwd</span>: <span class="hljs-string">&quot;123456&quot;</span>,roles: [ &#123; role: <span class="hljs-string">&quot;userAdminAnyDatabase&quot;</span>, db: <span class="hljs-string">&quot;admin&quot;</span>&#125;]&#125;)<br></code></pre></td></tr></table></figure><h2 id="远程连接和端口配置"><a href="#远程连接和端口配置" class="headerlink" title="远程连接和端口配置"></a>远程连接和端口配置</h2><h3 id="配置端口映射（暴露端口号）"><a href="#配置端口映射（暴露端口号）" class="headerlink" title="配置端口映射（暴露端口号）"></a>配置端口映射（暴露端口号）</h3><blockquote><p>NOTE: 虚拟机没有防火墙安全策略配置的，默认开放全部端口。如 果有防火墙配置，此处不映射端口，不能远程连接。</p></blockquote><ol><li>查看防火墙状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo firewall-cmd --state<br></code></pre></td></tr></table></figure><p><img src="20210323091547.png" alt="显示状态"></p><ol start="2"><li>查看指定端口是否开发</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo firewall-cmd --query-port=8080/tcp<br></code></pre></td></tr></table></figure><blockquote><p>端口改为想要的端口</p></blockquote><p><img src="20210323091932.png" alt="显示状态"></p><ol start="3"><li>开发 mongo 默认端口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo  firewall-cmd --zone=public --add-port=27017/tcp --permanent<br></code></pre></td></tr></table></figure><blockquote><p>permanent: 永久有效</p></blockquote><ol start="4"><li>查询端口状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo firewall-cmd --query-port=27017/tcp<br></code></pre></td></tr></table></figure><p><img src="20210323092306.png" alt="显示状态"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
